"""
This type stub file was generated by pyright.
"""

from enum import Enum
from typing import Optional

import httpx

"""Custom exceptions for notion-sdk-py.

This module defines the exceptions that can be raised when an error occurs.
"""
class RequestTimeoutError(Exception):
    """Exception for requests that timeout.

    The request that we made waits for a specified period of time or maximum number of
    retries to get the response. But if no response comes within the limited time or
    retries, then this Exception is raised.
    """
    code = ...
    def __init__(self, message: str = ...) -> None:
        ...
    


class HTTPResponseError(Exception):
    """Exception for HTTP errors.

    Responses from the API use HTTP response codes that are used to indicate general
    classes of success and error.
    """
    code: str = ...
    status: int
    headers: httpx.Headers
    body: str
    def __init__(self, response: httpx.Response, message: Optional[str] = ...) -> None:
        ...
    


class APIErrorCode(str, Enum):
    Unauthorized = ...
    RestrictedResource = ...
    ObjectNotFound = ...
    RateLimited = ...
    InvalidJSON = ...
    InvalidRequestURL = ...
    InvalidRequest = ...
    ValidationError = ...
    ConflictError = ...
    InternalServerError = ...
    ServiceUnavailable = ...


class APIResponseError(HTTPResponseError):
    """An error raised by Notion API."""
    code: APIErrorCode
    def __init__(self, response: httpx.Response, message: str, code: APIErrorCode) -> None:
        ...
    


def is_api_error_code(code: str) -> bool:
    """Check if given code belongs to the list of valid API error codes."""
    ...

