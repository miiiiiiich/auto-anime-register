"""
This type stub file was generated by pyright.
"""

import logging
from abc import abstractclassmethod
from dataclasses import dataclass
from types import TracebackType
from typing import Any, Dict, Optional, Type, Union

import httpx
from notion_client.typing import SyncAsync

"""Synchronous and asynchronous clients for Notion's API."""
@dataclass
class ClientOptions:
    """Options to configure the client.

    Attributes:
        auth: Bearer token for authentication. If left undefined, the `auth` parameter
            should be set on each request.
        timeout_ms: Number of milliseconds to wait before emitting a
            `RequestTimeoutError`.
        base_url: The root URL for sending API requests. This can be changed to test with
            a mock server.
        log_level: Verbosity of logs the instance will produce. By default, logs are
            written to `stdout`.
        logger: A custom logger.
        notion_version: Notion version to use.
    """
    auth: Optional[str] = ...
    timeout_ms: int = ...
    base_url: str = ...
    log_level: int = ...
    logger: Optional[logging.Logger] = ...
    notion_version: str = ...


class BaseClient:
    def __init__(self, client: Union[httpx.Client, httpx.AsyncClient], options: Optional[Union[Dict[str, Any], ClientOptions]] = ..., **kwargs: Any) -> None:
        ...
    
    @property
    def client(self) -> Union[httpx.Client, httpx.AsyncClient]:
        ...
    
    @client.setter
    def client(self, client: Union[httpx.Client, httpx.AsyncClient]) -> None:
        ...
    
    @abstractclassmethod
    def request(self, path: str, method: str, query: Optional[Dict[Any, Any]] = ..., body: Optional[Dict[Any, Any]] = ..., auth: Optional[str] = ...) -> SyncAsync[Any]:
        ...
    


class Client(BaseClient):
    """Synchronous client for Notion's API."""
    client: httpx.Client
    def __init__(self, options: Optional[Union[Dict[Any, Any], ClientOptions]] = ..., client: Optional[httpx.Client] = ..., **kwargs: Any) -> None:
        ...
    
    def __enter__(self) -> Client:
        ...
    
    def __exit__(self, exc_type: Type[BaseException], exc_value: BaseException, traceback: TracebackType) -> None:
        ...
    
    def close(self) -> None:
        """Close the connection pool of the current inner client."""
        ...
    
    def request(self, path: str, method: str, query: Optional[Dict[Any, Any]] = ..., body: Optional[Dict[Any, Any]] = ..., auth: Optional[str] = ...) -> Any:
        """Send an HTTP request."""
        ...
    


class AsyncClient(BaseClient):
    """Asynchronous client for Notion's API."""
    client: httpx.AsyncClient
    def __init__(self, options: Optional[Union[Dict[str, Any], ClientOptions]] = ..., client: Optional[httpx.AsyncClient] = ..., **kwargs: Any) -> None:
        ...
    
    async def __aenter__(self) -> AsyncClient:
        ...
    
    async def __aexit__(self, exc_type: Type[BaseException], exc_value: BaseException, traceback: TracebackType) -> None:
        ...
    
    async def aclose(self) -> None:
        """Close the connection pool of the current inner client."""
        ...
    
    async def request(self, path: str, method: str, query: Optional[Dict[Any, Any]] = ..., body: Optional[Dict[Any, Any]] = ..., auth: Optional[str] = ...) -> Any:
        """Send an HTTP request asynchronously."""
        ...
    


